단일 HTML 가게임(Phaser 3) 요구사항 정의서
1) 목적 & 범위

목적: 단일 HTML 파일 안에서 실행되는 간단한 회피형 액션 게임. 플레이어는 WASD(필요 시 Space = 점프)로 조작하며, 위에서 내려오는 장애물을 피해서 **체력(HP)**을 유지하고 웨이브를 진행한다.

범위: 로컬 파일 더블클릭 실행 가능(서버 불필요). PC 브라우저(Chrome, Edge) 기준. 모바일/패드는 목표 범위 밖(화면 축소/확대만 대응).

2) 기술 스택 & 형태

형태: index.html 하나에 HTML/CSS/JS 포함(외부 CDN은 Phaser만 허용).

엔진: Phaser 3.60 (신규 파티클/씬 API 사용, 3.55 구식 API 금지).

의존성:

<script src="https://cdn.jsdelivr.net/npm/phaser@3.60.0/dist/phaser.min.js"></script>

그 외 라이브러리 불필요(사운드는 WebAudio, 폰트는 시스템 폰트/이모지 사용).

3) 게임 플레이 개요

조작

A/D : 좌/우 이동

W 또는 Space : 점프 (기본 1단 점프, 옵션으로 2단 점프 on/off)

S : 빠른 하강(선택 사항)

P 또는 ESC : 일시정지/해제

목표: 각 웨이브를 생존. 피격 시 HP 감소, HP가 0이 되면 게임오버.

장애물: 화면 상단 밖에서 스폰 → 아래(또는 약간의 대각선)로 낙하 → 바닥 닿거나 화면 밖이면 소멸.

웨이브: 웨이브 번호가 오를수록 스폰 빈도↑, 낙하 속도↑, 동시 최대 수↑, 특수 장애물 출현.

점수: 생존 시간 + 웨이브 클리어 보너스. 최고 점수는 localStorage 저장.

4) 화면 구성(UI/HUD)

상단 좌측: HP 바(또는 하트), 현재 웨이브/남은 적 수(또는 남은 시간).

상단 우측: 점수, 최고점수.

중앙: 웨이브 시작 카운트다운(3→2→1), 게임오버 시 재시작 버튼 오버레이.

피격 피드백: 화면 가장자리 붉은 플래시(알파 0.35, 250ms), 짧은 카메라 흔들림(10~15px, 120ms).

5) 게임 오브젝트 정의
5.1 플레이어

물리 & 이동:

중력 적용, 지면 충돌 처리.

이동 속도 기본 moveSpeed = 260 px/s(웨이브에 따라 +0~+20% 버프 옵션).

점프력 jumpVelocity = -420 px/s(2단 점프 옵션 시 공중 1회 추가).

마찰/감속(슬라이딩 최소화), 공중 제어 70%.

크기/히트박스: 32×48(픽셀) 사각 충돌체. 스킨은 원/사각/이모지(🧑, 🟦) 중 하나로 간단 표현.

무적 프레임(i-frames): 피격 후 0.8초 동안 추가 피격 무효, 깜빡임 처리.

5.2 장애물(타입)

공통: 플레이어와 충돌 시 HP 감소 후 즉시 소멸(또는 관통형은 통과하며 1회만 데미지).

타입 예시:

메테오(직하형): 직선 하강, 중간 속도, -10 HP

슈리켄(빠른 소형): 빠른 하강, 소형, -7 HP, 스폰 확률 높음

웅덩이(느린 대형): 느린 하강, 대형, -15 HP, 바닥 착지 시 0.5초 잔류(닿으면 피해)

지그재그(경사형): x속도 포함(좌우 랜덤), -12 HP

관통 레이저(선택): 짧게 내려오며 얇은 히트박스, -20 HP, 경고 이펙트 선행

속성 파라미터(웨이브 스케일):

fallSpeed: 기본 200~380 px/s → 웨이브당 +15 px/s

spawnInterval: 기본 900ms → 웨이브당 -60ms (최소 350ms)

maxConcurrent: 기본 6 → 웨이브당 +1 (최대 16)

spawnSpreadX: 화면 폭 전역 랜덤, 한 프레임 다중 스폰 시 최소 간격 64px 유지(불가피한 즉사 방지)

6) 웨이브 설계

구성: 각 웨이브는 진행 시간 25~35초 + 휴식 3초(카운트다운)로 구성.

클리어 조건: 웨이브 타이머 종료(또는 목표 처치 수) 시 자동 클리어.

웨이브별 스케일 테이블(예시 1~10):

Wave	진행(s)	SpawnInterval(ms)	FallSpeed(px/s)	MaxConcurrent	특수
1	25	900	220	6	기본형만
2	25	840	235	7	빠른 소형 소폭 등장
3	26	780	250	8	경사형 소량
4	27	720	265	9	대형 등장 확률↑
5	28	660	280	10	짧은 2연속 스폰 패턴
6	30	600	300	11	경고 후 레이저(낮은 확률)
7	30	540	315	12	2열 동시 스폰 패턴
8	32	480	330	13	잔류형(웅덩이) 증가
9	33	420	350	15	랜덤 가속(일부)
10	35	380	370	16	하드 패턴 섞임

캡 수치: SpawnInterval >= 350ms, MaxConcurrent <= 16 유지.

7) 규칙 & 시스템

HP/데미지:

시작 HP 100. 0 이하 시 게임오버.

피격 시 화면 플래시 + 진동 + 사운드.

회복 없음(옵션: 웨이브 클리어 보상 +5~+10).

점수:

초당 +1점, 웨이브 클리어 + (웨이브×10)점.

게임오버 시 최고점수 갱신 시 localStorage 저장.

난이도 보정(선택):

연속 피격 시 다음 5초간 스폰 확률 10% 감소(부드러운 경험).

충돌 처리:

Arcade Physics 원형/사각 충돌 혼용. 플레이어-장애물 overlap 콜백으로 데미지 처리.

오브젝트 풀링:

장애물은 풀에서 재사용(최대 풀 크기 = MaxConcurrent * 2).

8) 상태 흐름

Boot → Menu: 제목, 시작 버튼, 최고점 표시

WaveReady: “Wave N” + 3,2,1 카운트다운

Playing: 타이머 진행, 스폰/충돌/점수

WaveClear: 짧은 연출, 다음 웨이브로

GameOver: 점수 표시, 재시작 버튼

Pause(토글): UI 오버레이, 타이머/스폰 정지

9) 그래픽/사운드

그래픽: 단색 셰이프/이모지/간단 텍스처(코드 생성)로 구성(외부 에셋 불필요).

이펙트: 파티클 폭발(Phaser 3.60 방식), 히트 시 붉은 vignette, 웨이브 시작 텍스트 팝.

사운드(선택): 점프, 피격, 웨이브 시작/클리어 짧은 SFX(브라우저 mute 토글).

10) 반응형 & 퍼포먼스

캔버스 크기: 기본 960×540(FHD 절반). 창 크기에 FIT 스케일, 가로세로비 유지.

목표 FPS: 60.

예산: 화면 내 장애물 ≤ MaxConcurrent, 파티클 총 파생 ≤ 200/폭발, 초당 폭발 3회 이하.

11) 설정값(상수) 한 곳에서 관리
const CFG = {
  canvas: { width: 960, height: 540 },
  player: { speed: 260, jump: -420, airControl: 0.7, hitbox: {w:32,h:48}, iframes: 800 },
  hp: { start: 100, healOnWaveClear: 0 }, // 0이면 회복 없음
  score: { perSecond: 1, waveBonus: n => n*10 },
  spawn: {
    baseInterval: 900, minInterval: 350, intervalStep: -60,
    baseSpeed: 220, speedStep: 15,
    maxConcurrentBase: 6, maxConcurrentStep: 1, maxConcurrentCap: 16
  },
  wave: { durationByWave: n => 24 + Math.min(11, n), rest: 3000 }
};

12) 데이터 구조(간단)
type Obstacle = {
  sprite: Phaser.Types.Physics.Arcade.SpriteWithDynamicBody;
  type: 'meteor'|'shuriken'|'puddle'|'zigzag'|'laser';
  dmg: number;
  active: boolean;
};
type GameState = 'boot'|'menu'|'ready'|'playing'|'clear'|'gameover'|'pause';

13) 핵심 로직(개요)

WaveManager

startWave(n): 파라미터 계산 → 타이머 시작 → 스폰 타이머 가동

update(dt): 남은 시간 관리 → 종료 시 endWave()

Spawner

trySpawn(): 동시 수 제한 확인 → 타입 가중치 랜덤 → 안전거리 검사 → 스폰

Damage

onOverlap(player, obstacle): i-frames 체크 → HP 감소 → i-frames on → 이펙트/사운드 → 장애물 소멸

14) 키 맵 & 접근성

키 변경: 최소 요구사항에는 미포함(추가 옵션으로 key remap 가능).

색각 배려: 색+형상(아이콘) 병행, 히트 시 진동/사운드로 중복 피드백.

15) 저장/불러오기

localStorage: { highScore: number } 저장/표시. 삭제 버튼(옵션) 제공.

16) 오류/예외 처리

물리 바닥 아래로 플레이어가 빠질 경우 y를 바닥으로 클램프, HP -10 패널티.

장애물이 플레이어 안쪽에서 스폰되지 않도록 상단 외부에서만 생성.

17) 테스트 시나리오(요약)

기본 이동/점프: A/D/W/Space 반응, 바닥 충돌 OK.

피격 & i-frames: 연속 충돌 시험 시 단일 피격만 적용.

웨이브 진행: 1→2 전환, 카운트다운 노출, 파라미터 스케일 정상.

스폰 제한: maxConcurrent 초과 금지.

점수/최고점수: 누적·저장·표기 정상.

일시정지: P/ESC 토글로 타이머·스폰 모두 정지/재개.

게임오버/재시작: HP 0 시 오버레이, 재시작 정상.

18) 완료 기준(수용 기준)

단일 index.html만으로 로컬 실행 시 에러 콘솔 0건.

기본 10웨이브까지 정상 진행, FPS 55 이상 유지.

피격/웨이브 전환/일시정지/재시작 모든 플로우 동작.

최고점수 저장/표시 정상.